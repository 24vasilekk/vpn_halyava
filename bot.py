import logging
from telegram import Update
from telegram.ext import (
    Application, 
    CommandHandler, 
    CallbackQueryHandler, 
    PreCheckoutQueryHandler, 
    MessageHandler, 
    filters
)
from config import TELEGRAM_BOT_TOKEN
from database import Database
from handlers.start import start_command
from handlers.vpn_setup import (
    setup_vpn_callback, 
    device_selection_callback, 
    install_app_callback, 
    get_key_callback
)
from handlers.payment import (
    payment_callback, 
    pay_yookassa_callback, 
    check_payment_command
)
from handlers.vpn_setup import (
    setup_vpn_callback, 
    device_selection_callback, 
    install_app_callback, 
    get_key_callback,
    recreate_config_callback  # ‚Üê –î–û–ë–ê–í–ò–¢–¨
)
from handlers.stars_payment import (
    stars_payment_callback, 
    precheckout_callback, 
    successful_payment_callback
)
from handlers.help import (
    help_callback, 
    terms_callback, 
    main_menu_callback
)
from handlers.admin import (
    admin_command,
    admin_stats_callback,
    admin_trial_users_callback,
    admin_paid_users_callback,
    admin_recent_payments_callback,
    admin_expiring_soon_callback
)

from handlers.server_selection import (
    choose_server_callback,
    select_server_callback,
    choose_protocol_callback,
    select_protocol_callback
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

logger = logging.getLogger(__name__)


def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    """
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db = Database()
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ")
    
    # ========================================
    # –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î
    # ========================================
    
    # –ö–æ–º–∞–Ω–¥–∞ /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    application.add_handler(
        CommandHandler("start", lambda u, c: start_command(u, c, db))
    )
    
    # –ö–æ–º–∞–Ω–¥–∞ /check_payment - –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –Æ–ö–∞—Å—Å—É
    application.add_handler(
        CommandHandler("check_payment", lambda u, c: check_payment_command(u, c, db))
    )
    
    # –ö–æ–º–∞–Ω–¥–∞ /admin - –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    application.add_handler(
        CommandHandler("admin", lambda u, c: admin_command(u, c, db))
    )
    
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
    
    # ========================================
    # –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò CALLBACK –ö–ù–û–ü–û–ö - VPN –ù–ê–°–¢–†–û–ô–ö–ê
    # ========================================
    
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å VPN"
    application.add_handler(
        CallbackQueryHandler(setup_vpn_callback, pattern='^setup_vpn$')
    )
    
    # –í—ã–±–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (Android, iPhone, iPad, etc.)
    application.add_handler(
        CallbackQueryHandler(device_selection_callback, pattern='^device_')
    )
    
    # –ö–Ω–æ–ø–∫–∞ "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ WireGuard"
    application.add_handler(
        CallbackQueryHandler(install_app_callback, pattern='^install_app$')
    )
    
    # –ö–Ω–æ–ø–∫–∞ "–ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á"
    application.add_handler(
        CallbackQueryHandler(lambda u, c: get_key_callback(u, c, db), pattern='^get_key$')
    )
    
    # –ö–Ω–æ–ø–∫–∞ "–û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥"
    application.add_handler(
        CallbackQueryHandler(lambda u, c: recreate_config_callback(u, c, db), pattern='^recreate_config$')
    )

    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ VPN –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
    
    # ========================================
    # –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –í–´–ë–û–†–ê –°–ï–†–í–ï–†–ê –ò –ü–†–û–¢–û–ö–û–õ–ê
    # ========================================
    
    # –ö–Ω–æ–ø–∫–∞ "–í—ã–±—Ä–∞—Ç—å —Å–µ—Ä–≤–µ—Ä"
    application.add_handler(
        CallbackQueryHandler(lambda u, c: choose_server_callback(u, c, db), pattern='^choose_server$')
    )
    
    # –í—ã–±–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞ (1 –∏–ª–∏ 2)
    application.add_handler(
        CallbackQueryHandler(lambda u, c: select_server_callback(u, c, db), pattern='^select_server_')
    )
    
    # –ö–Ω–æ–ø–∫–∞ "–í—ã–±—Ä–∞—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª"
    application.add_handler(
        CallbackQueryHandler(lambda u, c: choose_protocol_callback(u, c, db), pattern='^choose_protocol$')
    )
    
    # –í—ã–±–æ—Ä –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ (wireguard –∏–ª–∏ v2ray)
    application.add_handler(
        CallbackQueryHandler(lambda u, c: select_protocol_callback(u, c, db), pattern='^select_protocol_')
    )
    
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
    
    # ========================================
    # –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò CALLBACK –ö–ù–û–ü–û–ö - –ü–õ–ê–¢–ï–ñ–ò
    # ========================================
    
    # –ö–Ω–æ–ø–∫–∞ "–û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É" - –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
    application.add_handler(
        CallbackQueryHandler(payment_callback, pattern='^pay_subscription$')
    )
    
    # –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –Æ–ö–∞—Å—Å—É
    application.add_handler(
        CallbackQueryHandler(lambda u, c: pay_yookassa_callback(u, c, db), pattern='^pay_yookassa$')
    )
    
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π –Æ–ö–∞—Å—Å—É –¥–æ–±–∞–≤–ª–µ–Ω—ã")
    
    # ========================================
    # –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò CALLBACK –ö–ù–û–ü–û–ö - TELEGRAM STARS
    # ========================================
    
    # –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Telegram Stars
    application.add_handler(
        CallbackQueryHandler(lambda u, c: stars_payment_callback(u, c, db), pattern='^pay_stars$')
    )
    
    # Pre-checkout –∑–∞–ø—Ä–æ—Å (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è Stars)
    application.add_handler(
        PreCheckoutQueryHandler(precheckout_callback)
    )
    
    # –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞ Stars
    application.add_handler(
        MessageHandler(
            filters.SUCCESSFUL_PAYMENT, 
            lambda u, c: successful_payment_callback(u, c, db)
        )
    )
    
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram Stars –¥–æ–±–∞–≤–ª–µ–Ω—ã")
    
    # ========================================
    # –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò CALLBACK –ö–ù–û–ü–û–ö - –ü–û–ú–û–©–¨ –ò –ü–†–ê–í–ò–õ–ê
    # ========================================
    
    # –ö–Ω–æ–ø–∫–∞ "–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å"
    application.add_handler(
        CallbackQueryHandler(help_callback, pattern='^help$')
    )
    
    # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"
    application.add_handler(
        CallbackQueryHandler(terms_callback, pattern='^terms$')
    )
    
    # –ö–Ω–æ–ø–∫–∞ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" (–≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)
    application.add_handler(
        CallbackQueryHandler(main_menu_callback, pattern='^main_menu$')
    )
    
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–º–æ—â–∏ –∏ –ø—Ä–∞–≤–∏–ª –¥–æ–±–∞–≤–ª–µ–Ω—ã")
    
    # ========================================
    # –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò CALLBACK –ö–ù–û–ü–û–ö - –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨
    # ========================================
    
    # –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    application.add_handler(
        CallbackQueryHandler(lambda u, c: admin_stats_callback(u, c, db), pattern='^admin_stats$')
    )
    
    # –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å - –ø—Ä–æ–±–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    application.add_handler(
        CallbackQueryHandler(lambda u, c: admin_trial_users_callback(u, c, db), pattern='^admin_trial_users$')
    )
    
    # –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å - –ø–ª–∞—Ç–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    application.add_handler(
        CallbackQueryHandler(lambda u, c: admin_paid_users_callback(u, c, db), pattern='^admin_paid_users$')
    )
    
    # –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å - –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∏
    application.add_handler(
        CallbackQueryHandler(lambda u, c: admin_recent_payments_callback(u, c, db), pattern='^admin_recent_payments$')
    )
    
    # –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å - –∏—Å—Ç–µ–∫–∞—é—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ (–ù–û–í–ê–Ø)
    application.add_handler(
        CallbackQueryHandler(lambda u, c: admin_expiring_soon_callback(u, c, db), pattern='^admin_expiring_soon$')
    )
    
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
    
    # ========================================
    # –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–®–ò–ë–û–ö
    # ========================================
    
    async def error_handler(update: object, context: object) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        logger.error(f"Exception while handling an update: {context.error}")
        
        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        try:
            if update and hasattr(update, 'effective_user'):
                user_id = update.effective_user.id
                logger.error(f"Error occurred for user {user_id}")
        except Exception as e:
            logger.error(f"Error in error handler: {e}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω")
    
    # ========================================
    # –ó–ê–ü–£–°–ö –ë–û–¢–ê
    # ========================================
    
    logger.info("=" * 50)
    logger.info("üöÄ VPN Telegram Bot –∑–∞–ø—É—â–µ–Ω!")
    logger.info("=" * 50)
    logger.info("–û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    
    # –ó–∞–ø—É—Å–∫ polling (–ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram)
    application.run_polling(
        allowed_updates=Update.ALL_TYPES,
        drop_pending_updates=True  # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    )


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        logger.info("\nüëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (Ctrl+C)")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        raise