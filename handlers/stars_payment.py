from telegram import Update, LabeledPrice
from telegram.ext import ContextTypes
from keyboards import get_main_keyboard
from services.vpn_service import VPNService
from utils.referral import calculate_referral_bonus
from config import SUBSCRIPTION_DURATION_DAYS, SUBSCRIPTION_PRICE_STARS
import uuid

async def stars_payment_callback(update: Update, context: ContextTypes.DEFAULT_TYPE, db):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π payload
    payment_id = str(uuid.uuid4())
    context.user_data['pending_stars_payment'] = payment_id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –±–∞–∑—É
    db.add_payment(user_id, SUBSCRIPTION_PRICE_STARS, payment_id, 'stars', 'pending')
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã Stars
    title = "–ü–æ–¥–ø–∏—Å–∫–∞ VPN –Ω–∞ 30 –¥–Ω–µ–π"
    description = f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {SUBSCRIPTION_DURATION_DAYS} –¥–Ω–µ–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π 3 —É—Å—Ç—Ä–æ–π—Å—Ç–≤"
    payload = payment_id
    currency = "XTR"  # Telegram Stars
    prices = [LabeledPrice("–ü–æ–¥–ø–∏—Å–∫–∞ VPN", SUBSCRIPTION_PRICE_STARS)]
    
    await context.bot.send_invoice(
        chat_id=query.message.chat_id,
        title=title,
        description=description,
        payload=payload,
        provider_token="",  # –ü—É—Å—Ç–æ–π —Ç–æ–∫–µ–Ω –¥–ª—è Stars
        currency=currency,
        prices=prices
    )

async def precheckout_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç pre-checkout –∑–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π"""
    query = update.pre_checkout_query
    await query.answer(ok=True)

async def successful_payment_callback(update: Update, context: ContextTypes.DEFAULT_TYPE, db):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—É—é –æ–ø–ª–∞—Ç—É Stars"""
    user_id = update.effective_user.id
    payment_info = update.message.successful_payment
    payload = payment_info.invoice_payload
    
    print(f"DEBUG: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–ª–∞—Ç–µ–∂. User: {user_id}, Payload: {payload}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –±–∞–∑–µ
    payment = db.get_payment(payload)
    print(f"DEBUG: Payment –∏–∑ –ë–î: {payment}")
    
    if payment and payment[5] == 'pending':
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        server, protocol = db.get_user_preferences(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–¥–ø–∏—Å–∫–∞
        existing_sub = db.get_active_subscription(user_id)
        print(f"DEBUG: Existing subscription: {existing_sub}")
        
        if existing_sub:
            print(f"DEBUG: –ü—Ä–æ–¥–ª–µ–≤–∞—é –ø–æ–¥–ø–∏—Å–∫—É...")
            # –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 30 –¥–Ω–µ–π
            from datetime import datetime, timedelta
            current_end_str = existing_sub[5]
            current_end = datetime.fromisoformat(current_end_str)
            
            if current_end < datetime.now():
                new_end = datetime.now() + timedelta(days=SUBSCRIPTION_DURATION_DAYS)
            else:
                new_end = current_end + timedelta(days=SUBSCRIPTION_DURATION_DAYS)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á —Å —É—á—ë—Ç–æ–º –≤—ã–±–æ—Ä–∞
            vpn_key, user_uuid = await VPNService.generate_vpn_key(user_id, server, protocol, is_trial=False)
            
            if vpn_key and user_uuid:
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
                db.cursor.execute('''
                    UPDATE subscriptions
                    SET end_date = ?, is_trial = 0, vpn_key = ?, user_uuid = ?
                    WHERE user_id = ? AND is_active = 1
                ''', (new_end.isoformat(), vpn_key, user_uuid, user_id))
                db.connection.commit()
        else:
            print(f"DEBUG: –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞—é –Ω–æ–≤—É—é...")
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            vpn_key, user_uuid = await VPNService.generate_vpn_key(user_id, server, protocol, is_trial=False)
            if vpn_key and user_uuid:
                db.add_subscription(user_id, vpn_key, user_uuid, SUBSCRIPTION_DURATION_DAYS)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
        db.update_payment_status(payload, 'paid')
        
        # –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å —Ä–µ—Ñ–µ—Ä–µ—Ä—É
        user_data = db.get_user(user_id)
        if user_data and user_data[2]:
            referrer_id = user_data[2]
            bonus = calculate_referral_bonus(150)
            db.update_balance(referrer_id, bonus)
        
        context.user_data.pop('pending_stars_payment', None)
        
        protocol_name = "V2Ray" if protocol == 'v2ray' else "WireGuard"
        server_name = "üéØ TikTok (RU)" if server == 1 else "‚ö° –°–∫–æ—Ä–æ—Å—Ç—å (NL)"
        
        await update.message.reply_text(
            f"‚úÖ –û–ø–ª–∞—Ç–∞ Stars —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!\n\n"
            f"üéâ –ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ {SUBSCRIPTION_DURATION_DAYS} –¥–Ω–µ–π!\n\n"
            f"–°–µ—Ä–≤–µ—Ä: {server_name}\n"
            f"–ü—Ä–æ—Ç–æ–∫–æ–ª: {protocol_name}\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å VPN' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–∞.",
            reply_markup=get_main_keyboard()
        )
    else:
        print(f"DEBUG: –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ pending")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=get_main_keyboard()
        )