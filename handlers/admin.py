from telegram import Update
from telegram.ext import ContextTypes
from keyboards import get_admin_keyboard, get_main_keyboard
from config import ADMIN_ID
from datetime import datetime

def is_admin(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id == ADMIN_ID

async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE, db):
    """–ì–ª–∞–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    
    await update.message.reply_text(
        "üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_keyboard()
    )

async def admin_stats_callback(update: Update, context: ContextTypes.DEFAULT_TYPE, db):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    query = update.callback_query
    await query.answer()
    
    if not is_admin(query.from_user.id):
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_users = db.get_all_users_count()
    active_subs = db.get_active_subscriptions_count()
    total_revenue = db.get_total_revenue()
    
    trial_users = db.get_trial_users()
    paid_users = db.get_paid_users()
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –∏—Å—Ç—ë–∫—à–∏–µ
    now = datetime.now()
    active_trial = [u for u in trial_users if u[4] and datetime.fromisoformat(u[3]) > now]
    expired_trial = [u for u in trial_users if not u[4] or datetime.fromisoformat(u[3]) <= now]
    
    active_paid = [u for u in paid_users if u[4] and datetime.fromisoformat(u[3]) > now]
    expired_paid = [u for u in paid_users if not u[4] or datetime.fromisoformat(u[3]) <= now]
    
    revenue_by_method = db.get_revenue_by_method()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    stats_text = f"""
üìä **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: **{total_users}**
‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: **{active_subs}**

**üéÅ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥:**
‚îú –ê–∫—Ç–∏–≤–Ω—ã—Ö: **{len(active_trial)}**
‚îî –ò—Å—Ç–µ–∫–ª–æ: **{len(expired_trial)}**

**üíé –ü–ª–∞—Ç–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:**
‚îú –ê–∫—Ç–∏–≤–Ω—ã—Ö: **{len(active_paid)}**
‚îî –ò—Å—Ç–µ–∫–ª–æ: **{len(expired_paid)}**

üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: **{total_revenue:.2f}‚ÇΩ**

**–ü–æ –º–µ—Ç–æ–¥–∞–º –æ–ø–ª–∞—Ç—ã:**
"""
    
    for method, count, total in revenue_by_method:
        method_name = {
            'yookassa': 'üí≥ –Æ–ö–∞—Å—Å–∞',
            'stars': '‚≠ê Stars',
            'cryptobot': '‚Çø –ö—Ä–∏–ø—Ç–æ'
        }.get(method, method)
        stats_text += f"{method_name}: {count} –ø–ª–∞—Ç–µ–∂–µ–π, {total:.2f}‚ÇΩ\n"
    
    await query.edit_message_text(
        stats_text,
        parse_mode='Markdown',
        reply_markup=get_admin_keyboard()
    )

async def admin_trial_users_callback(update: Update, context: ContextTypes.DEFAULT_TYPE, db):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–æ–±–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º"""
    query = update.callback_query
    await query.answer()
    
    if not is_admin(query.from_user.id):
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    trial_users = db.get_trial_users()
    
    if not trial_users:
        await query.edit_message_text(
            "üìã –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –ø—Ä–æ–±–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ",
            reply_markup=get_admin_keyboard()
        )
        return
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –∏—Å—Ç—ë–∫—à–∏–µ
    now = datetime.now()
    active = [u for u in trial_users if u[4] and datetime.fromisoformat(u[3]) > now]
    expired = [u for u in trial_users if not u[4] or datetime.fromisoformat(u[3]) <= now]
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è
    active.sort(key=lambda x: x[3])
    expired.sort(key=lambda x: x[3], reverse=True)
    
    text = f"üéÅ **–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥** (–≤—Å–µ–≥–æ: {len(trial_users)})\n\n"
    
    # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
    if active:
        text += f"‚úÖ **–ê–ö–¢–ò–í–ù–´–ï ({len(active)}):**\n\n"
        for user_id, username, start_date, end_date, is_active in active:
            end_dt = datetime.fromisoformat(end_date)
            days_left = (end_dt - now).days
            hours_left = (end_dt - now).seconds // 3600
            
            time_left = f"{days_left}–¥ {hours_left}—á" if days_left > 0 else f"{hours_left}—á"
            end_formatted = end_dt.strftime("%d.%m.%Y %H:%M")
            
            text += f"üë§ @{username or '–ë–µ–∑ –∏–º–µ–Ω–∏'} (ID: `{user_id}`)\n"
            text += f"   ‚è∞ –î–æ: {end_formatted} (–æ—Å—Ç–∞–ª–æ—Å—å: {time_left})\n\n"
    
    # –ò—Å—Ç—ë–∫—à–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
    if expired:
        text += f"\n‚ùå **–ò–°–¢–ï–ö–®–ò–ï ({len(expired)}):**\n\n"
        for user_id, username, start_date, end_date, is_active in expired[:10]:
            end_formatted = datetime.fromisoformat(end_date).strftime("%d.%m.%Y %H:%M")
            
            text += f"üë§ @{username or '–ë–µ–∑ –∏–º–µ–Ω–∏'} (ID: `{user_id}`)\n"
            text += f"   üìÖ –ò—Å—Ç–µ–∫–ª–æ: {end_formatted}\n\n"
        
        if len(expired) > 10:
            text += f"... –∏ –µ—â—ë {len(expired) - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
    
    if len(text) > 4000:
        text = text[:4000] + "\n\n... (—Å–ø–∏—Å–æ–∫ –æ–±—Ä–µ–∑–∞–Ω)"
    
    await query.edit_message_text(
        text,
        parse_mode='Markdown',
        reply_markup=get_admin_keyboard()
    )

async def admin_paid_users_callback(update: Update, context: ContextTypes.DEFAULT_TYPE, db):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π"""
    query = update.callback_query
    await query.answer()
    
    if not is_admin(query.from_user.id):
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    paid_users = db.get_paid_users()
    
    if not paid_users:
        await query.edit_message_text(
            "üìã –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π",
            reply_markup=get_admin_keyboard()
        )
        return
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –∏—Å—Ç—ë–∫—à–∏–µ
    now = datetime.now()
    active = [u for u in paid_users if u[4] and datetime.fromisoformat(u[3]) > now]
    expired = [u for u in paid_users if not u[4] or datetime.fromisoformat(u[3]) <= now]
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è
    active.sort(key=lambda x: x[3])
    expired.sort(key=lambda x: x[3], reverse=True)
    
    text = f"üíé **–ü–ª–∞—Ç–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏** (–≤—Å–µ–≥–æ: {len(paid_users)})\n\n"
    
    # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
    if active:
        text += f"‚úÖ **–ê–ö–¢–ò–í–ù–´–ï ({len(active)}):**\n\n"
        for user_id, username, start_date, end_date, is_active in active:
            end_dt = datetime.fromisoformat(end_date)
            days_left = (end_dt - now).days
            hours_left = (end_dt - now).seconds // 3600
            
            time_left = f"{days_left}–¥ {hours_left}—á" if days_left > 0 else f"{hours_left}—á"
            end_formatted = end_dt.strftime("%d.%m.%Y %H:%M")
            
            text += f"üë§ @{username or '–ë–µ–∑ –∏–º–µ–Ω–∏'} (ID: `{user_id}`)\n"
            text += f"   ‚è∞ –î–æ: {end_formatted} (–æ—Å—Ç–∞–ª–æ—Å—å: {time_left})\n\n"
    
    # –ò—Å—Ç—ë–∫—à–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
    if expired:
        text += f"\n‚ùå **–ò–°–¢–ï–ö–®–ò–ï ({len(expired)}):**\n\n"
        for user_id, username, start_date, end_date, is_active in expired[:10]:
            end_formatted = datetime.fromisoformat(end_date).strftime("%d.%m.%Y %H:%M")
            
            text += f"üë§ @{username or '–ë–µ–∑ –∏–º–µ–Ω–∏'} (ID: `{user_id}`)\n"
            text += f"   üìÖ –ò—Å—Ç–µ–∫–ª–æ: {end_formatted}\n\n"
        
        if len(expired) > 10:
            text += f"... –∏ –µ—â—ë {len(expired) - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
    
    if len(text) > 4000:
        text = text[:4000] + "\n\n... (—Å–ø–∏—Å–æ–∫ –æ–±—Ä–µ–∑–∞–Ω)"
    
    await query.edit_message_text(
        text,
        parse_mode='Markdown',
        reply_markup=get_admin_keyboard()
    )

async def admin_recent_payments_callback(update: Update, context: ContextTypes.DEFAULT_TYPE, db):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∏"""
    query = update.callback_query
    await query.answer()
    
    if not is_admin(query.from_user.id):
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    recent_payments = db.get_recent_payments(limit=20)
    
    if not recent_payments:
        await query.edit_message_text(
            "üìã –ù–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π",
            reply_markup=get_admin_keyboard()
        )
        return
    
    text = "üí≥ **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∏:**\n\n"
    
    for user_id, username, amount, payment_method, status, created_at in recent_payments:
        status_emoji = "‚úÖ" if status == "paid" else "‚è≥"
        method_name = {
            'yookassa': 'üí≥',
            'stars': '‚≠ê',
            'cryptobot': '‚Çø'
        }.get(payment_method, 'üí∞')
        
        created_at_formatted = datetime.fromisoformat(created_at).strftime("%d.%m.%Y %H:%M")
        
        text += f"{status_emoji} {method_name} **{amount:.2f}‚ÇΩ** - @{username or '–ë–µ–∑ –∏–º–µ–Ω–∏'}\n"
        text += f"   –î–∞—Ç–∞: {created_at_formatted}\n\n"
    
    await query.edit_message_text(
        text,
        parse_mode='Markdown',
        reply_markup=get_admin_keyboard()
    )

async def admin_expiring_soon_callback(update: Update, context: ContextTypes.DEFAULT_TYPE, db):
    """–ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–∫–æ—Ä–æ –∏—Å—Ç–µ–∫—É—Ç (< 3 –¥–Ω–µ–π)"""
    query = update.callback_query
    await query.answer()
    
    if not is_admin(query.from_user.id):
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    expiring = db.get_expiring_subscriptions(days=3)
    
    if not expiring:
        await query.edit_message_text(
            "‚úÖ –ù–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫, –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –≤ –±–ª–∏–∂–∞–π—à–∏–µ 3 –¥–Ω—è",
            reply_markup=get_admin_keyboard()
        )
        return
    
    text = f"‚ö†Ô∏è **–ò—Å—Ç–µ–∫–∞—é—Ç –≤ –±–ª–∏–∂–∞–π—à–∏–µ 3 –¥–Ω—è** ({len(expiring)}):\n\n"
    
    now = datetime.now()
    for user_id, username, end_date, is_trial in expiring:
        end_dt = datetime.fromisoformat(end_date)
        hours_left = int((end_dt - now).total_seconds() / 3600)
        days_left = hours_left // 24
        
        sub_type = "üéÅ Trial" if is_trial else "üíé –ü–ª–∞—Ç–Ω–∞—è"
        time_left = f"{days_left}–¥ {hours_left % 24}—á" if days_left > 0 else f"{hours_left}—á"
        
        text += f"üë§ @{username or '–ë–µ–∑ –∏–º–µ–Ω–∏'} (ID: `{user_id}`)\n"
        text += f"   {sub_type} | –û—Å—Ç–∞–ª–æ—Å—å: {time_left}\n\n"
    
    if len(text) > 4000:
        text = text[:4000] + "\n\n... (—Å–ø–∏—Å–æ–∫ –æ–±—Ä–µ–∑–∞–Ω)"
    
    await query.edit_message_text(
        text,
        parse_mode='Markdown',
        reply_markup=get_admin_keyboard()
    )

async def admin_back_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    query = update.callback_query
    await query.answer()
    
    if not is_admin(query.from_user.id):
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    await query.edit_message_text(
        "üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_keyboard()
    )